# Copyright (c) 2021 Jan Dolin√°r
#
# This source code is released for free distribution under the terms of the
# GNU General Public License version 2.
#
# This file contains description of Kotlin grammar based on the ANTLR grammar
# from https://github.com/Kotlin/kotlin-grammar-gpl2.
#
# Kotlin notes:
#   1. This file was originally derived from files (reference grammar files) in https://github.com/Kotlin/kotlin-spec
#   2. Kotlin/kotlin-spec is distributed under Apache2 license
#   3. I have requested the original developers to "re-license or dual-license" (see https://github.com/Kotlin/kotlin-spec/issues/70)
#   4. The request was accepted and the original developer made a new repository https://github.com/Kotlin/kotlin-grammar-gpl2
#      for redistributing the reference grammar files under GPLv2 license.
#   5. This file is now derived from Kotlin/kotlin-grammar-gpl2 repository.
#   6. Unlike many other files in Universal Ctags, this source code is released strictly under GPLv2
#      and should not be relicensed to later versions of GPL.
#
# Kotlin tags format:
#   Kinds
#   - v variable
#   - C constant
#   - c class
#   - m method
#   - i interface
#   - o object
#   - p package
#   Key/value pairs
#   - package:x.y.z    This tag belongs to package x.y.z
#   - class:Bar    This tag belongs to class Bar (in no package)
#   - interface:Bar    This tag belongs to interface Bar (in no package)
#   - object:x.y.Zed   This tag belongs to the object with fully qualified name x.y.Zed
#
# Elmish tags format:
#   Kinds
#   - m module
#   - n namespace (ie a module that's renamed)
#   - t type
#   - c constructor (within a type)
#   - a alias
#   - p port
#   - f function
#   Key/value pairs
#   - roles:def    This tag is defined here
#   - roles:imported    This tag is imported here
#   - type:Thing    This constructor is of type Thing.



%prefix "pelmish"

%auxil	"struct parserCtx *"

%earlysource {
    #include "general.h"
}

%header {
	struct parserCtx;
}

%source {
#include "elmish_pre.h"
}

# Top level elements

file <-
    <( parsable
    / unparsable
    )*> EOF

parsable <-
    (<_>
    / functionDefinition
    ) {printf("xx Found parsable '%s'\n", $1); resetFailure(auxil, $0s);}

unparsable <- <Non_WS+> {printf("xx Found unparsable '%s'\n", $1); reportFailure(auxil, $0s);}

# Main Elm grammar

functionDefinition <- <identifier>  {PUSH_KIND(auxil, K_FUNCTION);makeKotlinTag(auxil, $1, $1s, true);POP_SCOPE(auxil);} _* '=' _* literal {printf("xx function definition: '%s'\n", $1);}

# Low level tokens

identifier <- < [A-Za-z_] [A-Za-z0-9_]* > {printf("xx identifier: '%s'\n", $1);}

literal <- < [0-9]+ > {printf("xx literal: '%s'\n", $1);}

# Ignorable things

delimitedComment <- < '{-' (delimitedComment / !'-}' .)* '-}' > {printf("xx delimited comment: '%s'\n", $1);}

lineComment <- < '--' Non_NL* (NL / EOF) > {printf("xx line comment: '%s'\n", $1);}

# One non-empty ignorable unit
_ <- <WS+ / NL / lineComment / delimitedComment> {printf("xx Found _: '%s'\n", $1);}

WS <- < [ \t]+ > {printf("xx Found WS: '%s'\n", $1);}
NL <- ('\n' / '\f' / '\r' '\n'?)
Non_NL <- < [^\n\r\f] >
Non_WS <- < [^ \t\n\r\f] >
EOF <- !. {printf("xx Found EOF\n");}

%%
#include "elmish_post.h"
