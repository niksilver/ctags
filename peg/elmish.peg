# Copyright (c) 2022 Nik Silver
#
# This source code is released for free distribution under the terms of the
# GNU General Public License version 2 or later.
#
# Elmish tags format:
#   Kinds
#   - m module
#   - n namespace (ie a module that's renamed)
#   - t type
#   - c constructor (within a type)
#   - a alias
#   - p port
#   - f function
#   Key/value pairs
#   - roles:def    This tag is defined here
#   - roles:imported    This tag is imported here
#   - type:Thing    This constructor is of type Thing.
#
# To do:
# - Tag an anonymous function with an anonymous name
# - Symbolic binary operators: +, - >>, etc.
# - Symbolic functions as prefix notation: Eg (+) 1 2
# - Signatures for types
# - Signatures for constructors


%prefix "pelmish"

%auxil	"struct parserCtx *"

%earlysource {
    #include "general.h"
}

%header {
	struct parserCtx;
}

%source {
#include "elmish_pre.h"
#include "routines.h"
}

# Top level elements -----------------------------------------------------

# We separate the file into the module section and the main section
# so that we only consider and tag one module declaration

file <-
    moduleSection?
    mainSection
    EOF

moduleSection <- _* moduleDeclaration

mainSection <-
    ( _
    / importStatement
    / functionDefinition
    / unparsable
    )*

unparsable <- <Non_WS+>

# Main Elm grammar -------------------------------------------------------

moduleDeclaration <-
    'module' _* <moduleIdentifier> _* ('exposing' _* exposedList)? {
        PUSH_KIND(auxil, K_MODULE);
        makeElmTag(auxil, $1, $1s, K_MODULE, ROLE_DEFINITION_INDEX, true);
    }

importStatement <-
    'import' _* moduleIdentifier _* ('exposing' _* '(' _* importedList _* ')')?

functionDefinition <-
    <lowerStartIdentifier> _* <parameterList?> _* '=' _* expression {
        int r = makeElmTag(auxil, $1, $1s, K_FUNCTION, ELM_ROLE_DEFINED, false);
        addElmSignature(r, $2);
    }

anonymousFunction <-
    '\\' _* parameterList? _* '->' _* expression

# Mid level tokens -------------------------------------------------------

moduleIdentifier <- upperStartIdentifier

exposedList <- '(' _* exposedItem _* (',' _* exposedList _* )* ')'

exposedItem <- <'expo'> {
        makeElmTag(auxil, $1, $1s, K_FUNCTION, ELM_ROLE_EXPOSED, false);
    }

importedList <- importedItem _* (',' *_ importedList)*

importedItem <- <[A-Za-z_]+> {
        makeElmTag(auxil, $1, $1s, K_FUNCTION, ELM_ROLE_IMPORTED, false);
    }

# For the signature field, we should exclude leading and trailing whitespace
#
parameterList <-
    ( literal _* parameterList )+
    / literal

expression <-
    '(' _* expression _* ')'
    / anonymousFunction
    / literal _* '+' _* literal
    / literal

# Low level tokens

identifier <- [A-Za-z_] [A-Za-z0-9_]*

upperStartIdentifier <- [A-Z] [A-Za-z0-9_]*

lowerStartIdentifier <- [a-z_] [A-Za-z0-9_]*

literal <- identifier / [0-9]+

# Ignorable things

delimitedComment <- '{-' (delimitedComment / !'-}' .)* '-}'

lineComment <- '--' Non_NL* (NL / EOF)

# One non-empty ignorable unit
_ <- WS+ / NL / lineComment / delimitedComment

WS <- [ \t]+
NL <- '\n' / '\f' / '\r' '\n'?
Non_NL <- [^\n\r\f]
Non_WS <- [^ \t\n\r\f]
EOF <- !.

%%
#include "elmish_post.h"
