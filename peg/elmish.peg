# Copyright (c) 2022 Nik Silver
# inspired by the Kotlin grammar by Jan Dolin√°r
#
# This source code is released for free distribution under the terms of the
# GNU General Public License version 2 or later.
#
# Kotlin tags format:
#   Kinds
#   - v variable
#   - C constant
#   - c class
#   - m method
#   - i interface
#   - o object
#   - p package
#   Key/value pairs
#   - package:x.y.z    This tag belongs to package x.y.z
#   - class:Bar    This tag belongs to class Bar (in no package)
#   - interface:Bar    This tag belongs to interface Bar (in no package)
#   - object:x.y.Zed   This tag belongs to the object with fully qualified name x.y.Zed
#
# Elmish tags format:
#   Kinds
#   - m module
#   - n namespace (ie a module that's renamed)
#   - t type
#   - c constructor (within a type)
#   - a alias
#   - p port
#   - f function
#   Key/value pairs
#   - roles:def    This tag is defined here
#   - roles:imported    This tag is imported here
#   - type:Thing    This constructor is of type Thing.



%prefix "pelmish"

%auxil	"struct parserCtx *"

%earlysource {
    #include "general.h"
}

%header {
	struct parserCtx;
}

%source {
#include "elmish_pre.h"
}

# Top level elements

file <-
    <( parsable
    / unparsable
    )*> EOF

parsable <-
    (<_>
    / functionDefinition
    ) {resetFailure(auxil, $0s);}

unparsable <- <Non_WS+> {reportFailure(auxil, $0s);}

# Main Elm grammar

functionDefinition <-
    <identifier> { PUSH_KIND(auxil, K_FUNCTION); makeElmTag(auxil, $1, $1s, true); POP_SCOPE(auxil); }
    _* '=' _* expression

expression <- literal

# Low level tokens

identifier <- [A-Za-z_] [A-Za-z0-9_]*

literal <- [0-9]+

# Ignorable things

delimitedComment <- '{-' (delimitedComment / !'-}' .)* '-}'

lineComment <- '--' Non_NL* (NL / EOF)

# One non-empty ignorable unit
_ <- WS+ / NL / lineComment / delimitedComment

WS <- [ \t]+
NL <- '\n' / '\f' / '\r' '\n'?
Non_NL <- [^\n\r\f]
Non_WS <- [^ \t\n\r\f]
EOF <- !.

%%
#include "elmish_post.h"
