Bar	input.elmish	/^class Bar<T, U>(val a: T, val b: U): Foo<T>$/;"	c
Baz	input.elmish	/^class Baz <T, U: Pair<String,Pair<T, Double>>>(val c: T, val d: U): Foo<T>$/;"	c
Foo	input.elmish	/^interface Foo<T> {$/;"	i
a	input.elmish	/^class Bar<T, U>(val a: T, val b: U): Foo<T>$/;"	C	class:Bar
b	input.elmish	/^class Bar<T, U>(val a: T, val b: U): Foo<T>$/;"	C	class:Bar
c	input.elmish	/^class Baz <T, U: Pair<String,Pair<T, Double>>>(val c: T, val d: U): Foo<T>$/;"	C	class:Baz
d	input.elmish	/^class Baz <T, U: Pair<String,Pair<T, Double>>>(val c: T, val d: U): Foo<T>$/;"	C	class:Baz
genericFunction1	input.elmish	/^    fun<T: Any> genericFunction1() = 41$/;"	m	interface:Foo
genericFunction2	input.elmish	/^    fun<T: Pair<String,Pair<Int, T>>> genericFunction2() = 42$/;"	m	interface:Foo
genericFunction3	input.elmish	/^    fun <T> genericFunction3() = 43$/;"	m	interface:Foo
